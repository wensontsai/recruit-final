{"version":3,"sources":["../../app/routes/sessionRoutes.js"],"names":[],"mappings":"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","file":"sessionRoutes.js","sourcesContent":["var jwt = require('jsonwebtoken');\nvar config = require ('../config');\n\n// bcrypt password hashing\nvar bcrypt = require('bcrypt');\n\nexports.loginUser = function(User, Session, app) {\n  var result = {};\n  return function(req, res, next){\n    User.findOne({ email: req.body.email }, function(err, user) {\n      if(err) return console.error(err);\n      if (!user) {\n        return res.json({ success: false, message: 'User Email not found!' });\n      }\n      if (user.admin !== 'Y') {\n        return res.json({ success: false, message: 'User does not have Admin privileges!' });\n      }\n\n      // verify password\n      if( bcrypt.compareSync(req.body.password, user.password) === false ) {\n        return res.json({ success: false, message: 'Authentication failed.  Wrong password!' });\n      }\n\n      var expiresIn = '24h';  //expires in 24hrs\n\n      var token = jwt.sign(user, config.secret, {\n        expiresIn: expiresIn\n      });\n      \n      result = {\n        success: true,\n        message: 'Enjoy your token!',\n        token: token,\n        expiresIn: expiresIn,\n        userId: user._id,\n        userEmail: user.email\n      }\n      res.json(result);\n    });\n  };\n}\nexports.logoutUser = function(User, Session, app) {\n  var result = {};\n  return function(req, res, next){\n    // logout session in DB\n\n    // on success send back json\n    result = {\n      success: true\n    }\n    res.json(result);\n  };\n}\nexports.authenticateUser = function(User, Session, app) {\n  return function(req, res, next){\n    User.findOne({ name: req.body.email }, function(err, user) {\n      if(err) return console.error(err);\n      if (!user) {\n        return res.json({ success: false, message: 'User Email not found!' });\n      }\n      if (user.admin !== 'Y') {\n        return res.json({ success: false, message: 'User does not have Admin privileges!' });\n      }\n      if(user.password !== req.body.password) {\n        return res.json({ success: false, message: 'Authentication failed.  Wrong password!' });\n      }\n      var token = jwt.sign(user, app.get('secret'), {\n        expiresIn: 1440 //expires in 24hrs\n      });\n\n      res.json({\n        success: true,\n        message: 'Enjoy your token!',\n        token: token\n      });\n    });\n  };\n}"]}