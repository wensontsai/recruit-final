{"version":3,"sources":["../../app/routes/answerRoutes.js"],"names":[],"mappings":"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","file":"answerRoutes.js","sourcesContent":["exports.submitAnswer = function(Answer, Prompt, Examination) {\n  var promptText = '';\n  var answeredPrompts = [];\n  var now = new Date();\n  var results = {};\n\n  return function(req, res, next){\n    Prompt.findOne({ _id: req.body.promptId }, function(err, prompt){\n      promptText = prompt.question;\n    });\n    Examination.findOne({ _id: req.body.examId }, function(err, exam){\n      exam.answeredPrompts.push(req.body.promptId);\n\n      if(exam.answeredPrompts.length === exam.questionsTotal) {\n        exam.completed = 'Y';\n      }\n\n      exam.save(function(err, exam) {\n        if(err) return console.error(err);\n          Answer.findOne({ examId: req.body.examId, promptId: req.body.promptId }, function(err, answer) {\n            if(err) return console.error(err);\n            if (answer) {\n              return res.json( {success: false, message: 'This question has already been answered for this exam session!'} );\n            } else {\n\n               var answer = new Answer({\n                userId : req.body.userId,\n                examId : req.body.examId,\n                promptId : req.body.promptId,\n                prompt: promptText,\n                answer : req.body.answer,\n              });\n\n              answer.save(function(err, answer) {\n                if(err) return console.error(err);\n\n                results = {\n                  userId : req.body.userId,\n                  examId : req.body.examId,\n                  promptId : req.body.promptId,\n                  prompt: promptText,\n                  answer : req.body.answer,\n                  answeredPrompts : exam.answeredPrompts,\n                  completed : exam.completed\n                };\n                res.json(results);\n              });\n            }\n          });\n      });\n    });\n\n\n  };\n};\nexports.queryCandidateAnswers = function(Answer, User) {\n  var results = {};\n  return function(req, res, next){\n    Answer.find({ userId: req.body.userId }, function(err, answers) {\n      if(err) return console.error(err);\n      User.findOne({ _id: req.body.userId }, function(err, user) {\n        if(err) return console.error(err);\n        results = {\n          userId: req.body.userId,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          email: user.email,\n          allAnswers: answers,\n        };\n        res.json(results);\n      });\n    });\n  };\n};"]}