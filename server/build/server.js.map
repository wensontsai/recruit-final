{"version":3,"sources":["../app/server.js"],"names":[],"mappings":"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","file":"server.js","sourcesContent":["// var express = require('express');\n\nimport express from 'express';\n\nvar mongoose = require('mongoose');\nvar bodyParser = require('body-parser');\nvar cookieParser = require('cookie-parser');\nvar morgan = require('morgan');\nvar jwt = require('jsonwebtoken');\n\nvar config = require ('./config');\nvar app = express();\n\n// ~~~~~> TESTING: tests spin up test DB from individual specs <~~~~~\nif (process.env.NODE_ENV === 'test') {\n  var port = 3121;\n  var db_success_msg = '';\n  var server_success_msg = '==> 🌎  *** TEST ENV *** fired up <== on port: ' +port;\n}\nelse {\n// Fire up DEVELOPMENT database\n  var port = process.env.PORT || 3001;\n  var db_success_msg = '~~~ > > > DEV ENV: Connected to MongoDB boyyÿÿÿÿÿÿ < < < ~~~';\n  var server_success_msg = '==> 🌎  DEV ENV: Magic is happening at http://localhost:' +port;\n\n  // ------------------------------------\n  // Mongo DB Connect\n  // ------------------------------------\n  mongoose.connect(config.db.dev, function(err){\n    if(err){\n      console.log('connection error', err);\n    } else {\n      console.log(db_success_msg);\n    }\n  });\n  app.set('secret', config.secret); // sets secret variable\n}\n\n// ------------------------------------\n// Middleware\n// ------------------------------------\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded( { extended: false } ));\n// app.use(morgan('dev'));\napp.use(cookieParser());\n\n\n// // JWT Token Verification for Admin Routes\n// app.use(function(req, res, next) {\n//   // check header, or url parameters, or post parameters for token\n//   var token = req.body.token || req.query.token || req.headers['x-access-token'];\n//   // decode token\n//   if (token) {\n//     // verify secret and check expiration\n//     jwt.verify(token, app.get('secret'), function(err, decoded) {\n//       if (err) {\n//         return res.json( { success: false, message: 'Failed to authenticate token!' } );\n//       }\n//       req.decoded = decoded;\n//       res.cookie(token, 'cookie_value').send('Token is set as cookie');\n//       // next();\n//     });\n//   } else {\n//     return res.status(403).send({\n//       success: false,\n//       message: 'No token provided!'\n//     });\n//   }\n// });\n\n\n// ------------------------------------\n// Mongoose - Models\n// ------------------------------------\nvar User = require('./models/user');\nvar Prompt = require('./models/prompt');\nvar Examination = require('./models/examination');\nvar Answer = require('./models/answer');\nvar Session = require('./models/session');\n\n// ------------------------------------\n// API Routes\n// ------------------------------------\nvar apiRoutes = express.Router ();\napp.use('/api', apiRoutes);\n\nvar promptRoutes = require('./routes/promptRoutes');\nvar examinationRoutes = require('./routes/examinationRoutes');\nvar answerRoutes = require('./routes/answerRoutes');\nvar userRoutes = require('./routes/userRoutes');\nvar sessionRoutes = require('./routes/sessionRoutes');\n\n// ::::: GET :::::\napiRoutes.get('/queryAllPrompts', promptRoutes.queryAllPrompts(Prompt));\napiRoutes.get('/queryAllPromptsList', promptRoutes.queryAllPromptsList(Prompt));\napiRoutes.get('/queryAllCandidates', userRoutes.queryAllUsers(User));\n\n// ::::: POST :::::\napiRoutes.post('/submitAnswer', answerRoutes.submitAnswer(Answer, Prompt, Examination));\napiRoutes.post('/queryCandidateAnswers', answerRoutes.queryCandidateAnswers(Answer, User));\napiRoutes.post('/queryExam', examinationRoutes.queryExam(Examination, User));\napiRoutes.post('/initializeExam', examinationRoutes.initializeExam(Examination, User));\napiRoutes.post('/startExam', examinationRoutes.startExam(Examination));\napiRoutes.post('/finishExam', examinationRoutes.finishExam(Examination, User));\napiRoutes.post('/addPrompt', promptRoutes.addPrompt(Prompt));\napiRoutes.post('/addPrompt', promptRoutes.addPrompt(Prompt));\napiRoutes.post('/editPrompt', promptRoutes.editPrompt(Prompt));\napiRoutes.post('/deletePrompt', promptRoutes.deletePrompt(Prompt));\napiRoutes.post('/addCandidate', userRoutes.addUser(User));\napiRoutes.post('/loginUser', sessionRoutes.loginUser(User, Session));\napiRoutes.post('/logoutUser', sessionRoutes.logoutUser(User, Session));\napiRoutes.post('/authenticateUser', sessionRoutes.authenticateUser(User, Session));\n\n\n// ------------------------------------\n// HTTP server\n// ------------------------------------\napp.listen(port);\nconsole.log(server_success_msg);\n\nmodule.exports = app;"]}